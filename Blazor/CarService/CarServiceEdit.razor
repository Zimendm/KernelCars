@page "/service/edit/{id:int}"

@using KernelCars.Models.ViewModels
@using BlazorInputFile

@inject IJSRuntime JsInterop
@inject HttpClient client
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment environment

@inherits OwningComponentBase<DataContext>

<h5><b>Автомобиль: </b>@carModel<b> Гос.номер: </b>@carRegistration<b> Водитель: </b>@carUser</h5>

<EditForm Model="CarServiceData">

    <div class="form-group">
        @*<div class="col-md-offset-2 col-md-10">*@
        <label>Выполненные работы:</label>
        <table>
            @{
                int cnt = 0;

                foreach (var item in assignedTOF)
                {
                    if (cnt++ % 5 == 0)
                    {
                        @:<tr>
                        }
                        @:<td>
                            <div>
                                <input type="checkbox"
                                       name="selectedWorks"
                                       value="item.TypeOfServiceID"
                                       checked="@item.IsAssigned" />
                                <label>@item.Service</label>
                            </div>
                        @:</td>
                    }
                    //if (cnt++ % 3 == 0)
                    //{
                @:</tr>
                @*}*@
            }
        </table>
        @*</div>*@
    </div>
    <div class="form-row">
        <div class="col">
            <div class="form-group">
                <table>
                    <tr>
                        <td>Дата выполнения работ:</td>
                        <td><InputDate @bind-Value="CarServiceData.CompleteDate"></InputDate></td>
                    </tr>
                    <tr>
                        <td>Показания одометра:</td>
                        <td><InputNumber @bind-Value="CarServiceData.Odometr"></InputNumber></td>
                    </tr>
                    <tr>
                        <td>Стоимость (грн. с НДС):</td>
                        <td><InputNumber @bind-Value="CarServiceData.Ammount"></InputNumber></td>
                    </tr>
                </table>
            </div>
        </div>
        
        <div class="col">
            <div class="form-group">
                <label>Комментарии:</label>
                <InputTextArea class="form-control" @bind-Value="@CarServiceData.ServiceDescription"></InputTextArea>
            </div>
        </div>
    </div>

    

    <div class="form-group">
        <label>Скан акта выполненных работ: </label>
      @*   <InputFile OnChange="HandleSelection"></InputFile> *@
        <p>@status</p>

    </div>
    <div class="form-row">
        <iframe src=@filePath width="800" height="300"></iframe>
    </div>

    @*<div class="form-group">
            <label for="exampleFormControlFile1">Example file input</label>
            <input type="file" class="form-control-file" id="exampleFormControlFile1">
        </div>*@

    <!--<div class="custom-file">
        <input type="file" class="custom-file-input" id="customFile">
        <label class="custom-file-label" for="customFile">Choose file</label>
    </div>

    <div class="file-field">
        <div class="btn btn-primary btn-sm float-left">
            <span>Choose file</span>
            <input type="file">
        </div>-->
    @*<div class="file-path-wrapper">
            <input class="file-path validate" type="text" placeholder="Upload your file">
        </div>*@
    <!--</div>-->



    <NavLink href="service">Back</NavLink>
</EditForm>

@code{
    [Inject]
    public NavigationManager NavManager { get; set; }

    DataContext _context => Service;

    [Parameter]
    public int Id { get; set; }

    public CarService CarServiceData { get; set; } = new CarService();

    List<AssignedTypeOfService> assignedTOF = new List<AssignedTypeOfService>();

    string filePath;
    string status;

    string carModel;
    string carRegistration;
    string carUser;



    protected override void OnInitialized()
    {

        //base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        CarServiceData = _context.CarServices.Include(c => c.WorkAssigments).FirstOrDefault(cs => cs.ID == Id);

        if (Id != 0)
        {

            if (CarServiceData != null)
            {
                assignedTOF = PopulateAssignedWorks(CarServiceData);


                var tmpCar = _context.Cars
                .Include(c => c.CarUsers).ThenInclude(c => c.Employee)
                .Include(c => c.CarModel).ThenInclude(c => c.Manufacturer).FirstOrDefault(c => c.Id == CarServiceData.CarId);

                if (tmpCar != null)
                {
                    carUser = tmpCar.CarUserForView;
                    carModel = tmpCar.CarModel.Manufacturer.Name + " " + tmpCar.CarModel.Model;
                    carRegistration = tmpCar.RegistrationNumber;

                }


                //if (Id != 0)
                //{
                //    CarService carService = _context.CarServices.Include(c => c.WorkAssigments).Where(c => c.ID == Id).FirstOrDefault();
                //    assignedTOF = PopulateAssignedWorks(carService);
                //}
            }

        }




        //base.OnParametersSet();
        if (Id != 0)
        {
            string uploadFolder = Path.Combine("AccountingDocuments", carRegistration);
            if (CarServiceData.DocumentPath != null)
            {
                filePath = Path.Combine(uploadFolder, CarServiceData.DocumentPath);
            }

        }
    }


    private List<AssignedTypeOfService> PopulateAssignedWorks(CarService carService)
    {
        var allServices = _context.TypeOfServices;
        var currentServices = new HashSet<int>(carService.WorkAssigments.Select(c => c.TypeOfServiceId));
        var viewModel = new List<AssignedTypeOfService>();
        foreach (var service in allServices)
        {
            viewModel.Add(new AssignedTypeOfService
            {
                TypeOfServiceID = service.ID,
                Service = service.Service,
                IsAssigned = currentServices.Contains(service.ID)
            });
        }

        return viewModel;
        //ViewBag.Works = viewModel;
    }


    async Task HandleSelection(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        string uniqueFileName;

        if (file != null)
        {
            //= file.RelativePath;
            // Just load into .NET memory to show it can be done
            // Alternatively it could be saved to disk, or parsed in memory, or similar
            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);

            status = $"Finished loading {file.Size} bytes from {file.Name}";








            var content = new MultipartFormDataContent
{
                { new ByteArrayContent(ms.GetBuffer()), "\"upload\"", file.Name }
            };


            filePath = $"data:application/pdf;base64,{Convert.ToBase64String(ms.ToArray())}";



            string uploadFolder = Path.Combine(environment.WebRootPath, "AccountingDocuments");
            uploadFolder = Path.Combine(uploadFolder, carRegistration);

            try
            {
                if (!Directory.Exists(uploadFolder))
                {
                    DirectoryInfo di = Directory.CreateDirectory(uploadFolder);
                }

            }
            catch (Exception)
            {

                //throw;
            }



            uniqueFileName = Guid.NewGuid() + "_" + file.Name;
            //filePath = Path.Combine(uploadFolder, uniqueFileName);




            await client.PostAsync($"api/upload?registrationNumber={Path.Combine(uploadFolder, uniqueFileName)}", content);
            CarServiceData.DocumentPath = uniqueFileName;
            status = $"Finished loading {file.Size} bytes from {file.Name}";
        }
    }
}
